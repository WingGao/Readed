// Code generated by ent, DO NOT EDIT.

package post

import (
	"readmark/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id uint) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uint) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldUserID, v))
}

// Site applies equality check predicate on the "site" field. It's identical to SiteEQ.
func Site(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldSite, v))
}

// Path applies equality check predicate on the "path" field. It's identical to PathEQ.
func Path(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldPath, v))
}

// Pid applies equality check predicate on the "pid" field. It's identical to PidEQ.
func Pid(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldPid, v))
}

// ReadLastReplyID applies equality check predicate on the "read_last_reply_id" field. It's identical to ReadLastReplyIDEQ.
func ReadLastReplyID(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldReadLastReplyID, v))
}

// ReadLastReplyIndex applies equality check predicate on the "read_last_reply_index" field. It's identical to ReadLastReplyIndexEQ.
func ReadLastReplyIndex(v int) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldReadLastReplyIndex, v))
}

// ReadLastReplyTime applies equality check predicate on the "read_last_reply_time" field. It's identical to ReadLastReplyTimeEQ.
func ReadLastReplyTime(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldReadLastReplyTime, v))
}

// MarkBanned applies equality check predicate on the "mark_banned" field. It's identical to MarkBannedEQ.
func MarkBanned(v bool) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldMarkBanned, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldUpdatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uint) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uint) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uint) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uint) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v uint) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v uint) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v uint) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v uint) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldUserID, v))
}

// SiteEQ applies the EQ predicate on the "site" field.
func SiteEQ(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldSite, v))
}

// SiteNEQ applies the NEQ predicate on the "site" field.
func SiteNEQ(v string) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldSite, v))
}

// SiteIn applies the In predicate on the "site" field.
func SiteIn(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldSite, vs...))
}

// SiteNotIn applies the NotIn predicate on the "site" field.
func SiteNotIn(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldSite, vs...))
}

// SiteGT applies the GT predicate on the "site" field.
func SiteGT(v string) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldSite, v))
}

// SiteGTE applies the GTE predicate on the "site" field.
func SiteGTE(v string) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldSite, v))
}

// SiteLT applies the LT predicate on the "site" field.
func SiteLT(v string) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldSite, v))
}

// SiteLTE applies the LTE predicate on the "site" field.
func SiteLTE(v string) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldSite, v))
}

// SiteContains applies the Contains predicate on the "site" field.
func SiteContains(v string) predicate.Post {
	return predicate.Post(sql.FieldContains(FieldSite, v))
}

// SiteHasPrefix applies the HasPrefix predicate on the "site" field.
func SiteHasPrefix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasPrefix(FieldSite, v))
}

// SiteHasSuffix applies the HasSuffix predicate on the "site" field.
func SiteHasSuffix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasSuffix(FieldSite, v))
}

// SiteEqualFold applies the EqualFold predicate on the "site" field.
func SiteEqualFold(v string) predicate.Post {
	return predicate.Post(sql.FieldEqualFold(FieldSite, v))
}

// SiteContainsFold applies the ContainsFold predicate on the "site" field.
func SiteContainsFold(v string) predicate.Post {
	return predicate.Post(sql.FieldContainsFold(FieldSite, v))
}

// PathEQ applies the EQ predicate on the "path" field.
func PathEQ(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldPath, v))
}

// PathNEQ applies the NEQ predicate on the "path" field.
func PathNEQ(v string) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldPath, v))
}

// PathIn applies the In predicate on the "path" field.
func PathIn(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldPath, vs...))
}

// PathNotIn applies the NotIn predicate on the "path" field.
func PathNotIn(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldPath, vs...))
}

// PathGT applies the GT predicate on the "path" field.
func PathGT(v string) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldPath, v))
}

// PathGTE applies the GTE predicate on the "path" field.
func PathGTE(v string) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldPath, v))
}

// PathLT applies the LT predicate on the "path" field.
func PathLT(v string) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldPath, v))
}

// PathLTE applies the LTE predicate on the "path" field.
func PathLTE(v string) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldPath, v))
}

// PathContains applies the Contains predicate on the "path" field.
func PathContains(v string) predicate.Post {
	return predicate.Post(sql.FieldContains(FieldPath, v))
}

// PathHasPrefix applies the HasPrefix predicate on the "path" field.
func PathHasPrefix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasPrefix(FieldPath, v))
}

// PathHasSuffix applies the HasSuffix predicate on the "path" field.
func PathHasSuffix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasSuffix(FieldPath, v))
}

// PathEqualFold applies the EqualFold predicate on the "path" field.
func PathEqualFold(v string) predicate.Post {
	return predicate.Post(sql.FieldEqualFold(FieldPath, v))
}

// PathContainsFold applies the ContainsFold predicate on the "path" field.
func PathContainsFold(v string) predicate.Post {
	return predicate.Post(sql.FieldContainsFold(FieldPath, v))
}

// PidEQ applies the EQ predicate on the "pid" field.
func PidEQ(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldPid, v))
}

// PidNEQ applies the NEQ predicate on the "pid" field.
func PidNEQ(v string) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldPid, v))
}

// PidIn applies the In predicate on the "pid" field.
func PidIn(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldPid, vs...))
}

// PidNotIn applies the NotIn predicate on the "pid" field.
func PidNotIn(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldPid, vs...))
}

// PidGT applies the GT predicate on the "pid" field.
func PidGT(v string) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldPid, v))
}

// PidGTE applies the GTE predicate on the "pid" field.
func PidGTE(v string) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldPid, v))
}

// PidLT applies the LT predicate on the "pid" field.
func PidLT(v string) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldPid, v))
}

// PidLTE applies the LTE predicate on the "pid" field.
func PidLTE(v string) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldPid, v))
}

// PidContains applies the Contains predicate on the "pid" field.
func PidContains(v string) predicate.Post {
	return predicate.Post(sql.FieldContains(FieldPid, v))
}

// PidHasPrefix applies the HasPrefix predicate on the "pid" field.
func PidHasPrefix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasPrefix(FieldPid, v))
}

// PidHasSuffix applies the HasSuffix predicate on the "pid" field.
func PidHasSuffix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasSuffix(FieldPid, v))
}

// PidEqualFold applies the EqualFold predicate on the "pid" field.
func PidEqualFold(v string) predicate.Post {
	return predicate.Post(sql.FieldEqualFold(FieldPid, v))
}

// PidContainsFold applies the ContainsFold predicate on the "pid" field.
func PidContainsFold(v string) predicate.Post {
	return predicate.Post(sql.FieldContainsFold(FieldPid, v))
}

// ReadLastReplyIDEQ applies the EQ predicate on the "read_last_reply_id" field.
func ReadLastReplyIDEQ(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldReadLastReplyID, v))
}

// ReadLastReplyIDNEQ applies the NEQ predicate on the "read_last_reply_id" field.
func ReadLastReplyIDNEQ(v string) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldReadLastReplyID, v))
}

// ReadLastReplyIDIn applies the In predicate on the "read_last_reply_id" field.
func ReadLastReplyIDIn(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldReadLastReplyID, vs...))
}

// ReadLastReplyIDNotIn applies the NotIn predicate on the "read_last_reply_id" field.
func ReadLastReplyIDNotIn(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldReadLastReplyID, vs...))
}

// ReadLastReplyIDGT applies the GT predicate on the "read_last_reply_id" field.
func ReadLastReplyIDGT(v string) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldReadLastReplyID, v))
}

// ReadLastReplyIDGTE applies the GTE predicate on the "read_last_reply_id" field.
func ReadLastReplyIDGTE(v string) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldReadLastReplyID, v))
}

// ReadLastReplyIDLT applies the LT predicate on the "read_last_reply_id" field.
func ReadLastReplyIDLT(v string) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldReadLastReplyID, v))
}

// ReadLastReplyIDLTE applies the LTE predicate on the "read_last_reply_id" field.
func ReadLastReplyIDLTE(v string) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldReadLastReplyID, v))
}

// ReadLastReplyIDContains applies the Contains predicate on the "read_last_reply_id" field.
func ReadLastReplyIDContains(v string) predicate.Post {
	return predicate.Post(sql.FieldContains(FieldReadLastReplyID, v))
}

// ReadLastReplyIDHasPrefix applies the HasPrefix predicate on the "read_last_reply_id" field.
func ReadLastReplyIDHasPrefix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasPrefix(FieldReadLastReplyID, v))
}

// ReadLastReplyIDHasSuffix applies the HasSuffix predicate on the "read_last_reply_id" field.
func ReadLastReplyIDHasSuffix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasSuffix(FieldReadLastReplyID, v))
}

// ReadLastReplyIDEqualFold applies the EqualFold predicate on the "read_last_reply_id" field.
func ReadLastReplyIDEqualFold(v string) predicate.Post {
	return predicate.Post(sql.FieldEqualFold(FieldReadLastReplyID, v))
}

// ReadLastReplyIDContainsFold applies the ContainsFold predicate on the "read_last_reply_id" field.
func ReadLastReplyIDContainsFold(v string) predicate.Post {
	return predicate.Post(sql.FieldContainsFold(FieldReadLastReplyID, v))
}

// ReadLastReplyIndexEQ applies the EQ predicate on the "read_last_reply_index" field.
func ReadLastReplyIndexEQ(v int) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldReadLastReplyIndex, v))
}

// ReadLastReplyIndexNEQ applies the NEQ predicate on the "read_last_reply_index" field.
func ReadLastReplyIndexNEQ(v int) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldReadLastReplyIndex, v))
}

// ReadLastReplyIndexIn applies the In predicate on the "read_last_reply_index" field.
func ReadLastReplyIndexIn(vs ...int) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldReadLastReplyIndex, vs...))
}

// ReadLastReplyIndexNotIn applies the NotIn predicate on the "read_last_reply_index" field.
func ReadLastReplyIndexNotIn(vs ...int) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldReadLastReplyIndex, vs...))
}

// ReadLastReplyIndexGT applies the GT predicate on the "read_last_reply_index" field.
func ReadLastReplyIndexGT(v int) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldReadLastReplyIndex, v))
}

// ReadLastReplyIndexGTE applies the GTE predicate on the "read_last_reply_index" field.
func ReadLastReplyIndexGTE(v int) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldReadLastReplyIndex, v))
}

// ReadLastReplyIndexLT applies the LT predicate on the "read_last_reply_index" field.
func ReadLastReplyIndexLT(v int) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldReadLastReplyIndex, v))
}

// ReadLastReplyIndexLTE applies the LTE predicate on the "read_last_reply_index" field.
func ReadLastReplyIndexLTE(v int) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldReadLastReplyIndex, v))
}

// ReadLastReplyTimeEQ applies the EQ predicate on the "read_last_reply_time" field.
func ReadLastReplyTimeEQ(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldReadLastReplyTime, v))
}

// ReadLastReplyTimeNEQ applies the NEQ predicate on the "read_last_reply_time" field.
func ReadLastReplyTimeNEQ(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldReadLastReplyTime, v))
}

// ReadLastReplyTimeIn applies the In predicate on the "read_last_reply_time" field.
func ReadLastReplyTimeIn(vs ...time.Time) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldReadLastReplyTime, vs...))
}

// ReadLastReplyTimeNotIn applies the NotIn predicate on the "read_last_reply_time" field.
func ReadLastReplyTimeNotIn(vs ...time.Time) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldReadLastReplyTime, vs...))
}

// ReadLastReplyTimeGT applies the GT predicate on the "read_last_reply_time" field.
func ReadLastReplyTimeGT(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldReadLastReplyTime, v))
}

// ReadLastReplyTimeGTE applies the GTE predicate on the "read_last_reply_time" field.
func ReadLastReplyTimeGTE(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldReadLastReplyTime, v))
}

// ReadLastReplyTimeLT applies the LT predicate on the "read_last_reply_time" field.
func ReadLastReplyTimeLT(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldReadLastReplyTime, v))
}

// ReadLastReplyTimeLTE applies the LTE predicate on the "read_last_reply_time" field.
func ReadLastReplyTimeLTE(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldReadLastReplyTime, v))
}

// MarkBannedEQ applies the EQ predicate on the "mark_banned" field.
func MarkBannedEQ(v bool) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldMarkBanned, v))
}

// MarkBannedNEQ applies the NEQ predicate on the "mark_banned" field.
func MarkBannedNEQ(v bool) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldMarkBanned, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Post) predicate.Post {
	return predicate.Post(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Post) predicate.Post {
	return predicate.Post(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Post) predicate.Post {
	return predicate.Post(sql.NotPredicates(p))
}
