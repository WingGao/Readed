// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"readmark/ent/post"
	"readmark/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PostUpdate is the builder for updating Post entities.
type PostUpdate struct {
	config
	hooks    []Hook
	mutation *PostMutation
}

// Where appends a list predicates to the PostUpdate builder.
func (pu *PostUpdate) Where(ps ...predicate.Post) *PostUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUserID sets the "user_id" field.
func (pu *PostUpdate) SetUserID(u uint) *PostUpdate {
	pu.mutation.ResetUserID()
	pu.mutation.SetUserID(u)
	return pu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (pu *PostUpdate) SetNillableUserID(u *uint) *PostUpdate {
	if u != nil {
		pu.SetUserID(*u)
	}
	return pu
}

// AddUserID adds u to the "user_id" field.
func (pu *PostUpdate) AddUserID(u int) *PostUpdate {
	pu.mutation.AddUserID(u)
	return pu
}

// SetSite sets the "site" field.
func (pu *PostUpdate) SetSite(s string) *PostUpdate {
	pu.mutation.SetSite(s)
	return pu
}

// SetNillableSite sets the "site" field if the given value is not nil.
func (pu *PostUpdate) SetNillableSite(s *string) *PostUpdate {
	if s != nil {
		pu.SetSite(*s)
	}
	return pu
}

// SetPath sets the "path" field.
func (pu *PostUpdate) SetPath(s string) *PostUpdate {
	pu.mutation.SetPath(s)
	return pu
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (pu *PostUpdate) SetNillablePath(s *string) *PostUpdate {
	if s != nil {
		pu.SetPath(*s)
	}
	return pu
}

// ClearPath clears the value of the "path" field.
func (pu *PostUpdate) ClearPath() *PostUpdate {
	pu.mutation.ClearPath()
	return pu
}

// SetPid sets the "pid" field.
func (pu *PostUpdate) SetPid(s string) *PostUpdate {
	pu.mutation.SetPid(s)
	return pu
}

// SetNillablePid sets the "pid" field if the given value is not nil.
func (pu *PostUpdate) SetNillablePid(s *string) *PostUpdate {
	if s != nil {
		pu.SetPid(*s)
	}
	return pu
}

// SetReadLastReplyID sets the "read_last_reply_id" field.
func (pu *PostUpdate) SetReadLastReplyID(s string) *PostUpdate {
	pu.mutation.SetReadLastReplyID(s)
	return pu
}

// SetNillableReadLastReplyID sets the "read_last_reply_id" field if the given value is not nil.
func (pu *PostUpdate) SetNillableReadLastReplyID(s *string) *PostUpdate {
	if s != nil {
		pu.SetReadLastReplyID(*s)
	}
	return pu
}

// ClearReadLastReplyID clears the value of the "read_last_reply_id" field.
func (pu *PostUpdate) ClearReadLastReplyID() *PostUpdate {
	pu.mutation.ClearReadLastReplyID()
	return pu
}

// SetReadLastReplyIndex sets the "read_last_reply_index" field.
func (pu *PostUpdate) SetReadLastReplyIndex(i int) *PostUpdate {
	pu.mutation.ResetReadLastReplyIndex()
	pu.mutation.SetReadLastReplyIndex(i)
	return pu
}

// SetNillableReadLastReplyIndex sets the "read_last_reply_index" field if the given value is not nil.
func (pu *PostUpdate) SetNillableReadLastReplyIndex(i *int) *PostUpdate {
	if i != nil {
		pu.SetReadLastReplyIndex(*i)
	}
	return pu
}

// AddReadLastReplyIndex adds i to the "read_last_reply_index" field.
func (pu *PostUpdate) AddReadLastReplyIndex(i int) *PostUpdate {
	pu.mutation.AddReadLastReplyIndex(i)
	return pu
}

// ClearReadLastReplyIndex clears the value of the "read_last_reply_index" field.
func (pu *PostUpdate) ClearReadLastReplyIndex() *PostUpdate {
	pu.mutation.ClearReadLastReplyIndex()
	return pu
}

// SetReadLastReplyTime sets the "read_last_reply_time" field.
func (pu *PostUpdate) SetReadLastReplyTime(t time.Time) *PostUpdate {
	pu.mutation.SetReadLastReplyTime(t)
	return pu
}

// SetNillableReadLastReplyTime sets the "read_last_reply_time" field if the given value is not nil.
func (pu *PostUpdate) SetNillableReadLastReplyTime(t *time.Time) *PostUpdate {
	if t != nil {
		pu.SetReadLastReplyTime(*t)
	}
	return pu
}

// ClearReadLastReplyTime clears the value of the "read_last_reply_time" field.
func (pu *PostUpdate) ClearReadLastReplyTime() *PostUpdate {
	pu.mutation.ClearReadLastReplyTime()
	return pu
}

// SetMarkBanned sets the "mark_banned" field.
func (pu *PostUpdate) SetMarkBanned(b bool) *PostUpdate {
	pu.mutation.SetMarkBanned(b)
	return pu
}

// SetNillableMarkBanned sets the "mark_banned" field if the given value is not nil.
func (pu *PostUpdate) SetNillableMarkBanned(b *bool) *PostUpdate {
	if b != nil {
		pu.SetMarkBanned(*b)
	}
	return pu
}

// ClearMarkBanned clears the value of the "mark_banned" field.
func (pu *PostUpdate) ClearMarkBanned() *PostUpdate {
	pu.mutation.ClearMarkBanned()
	return pu
}

// Mutation returns the PostMutation object of the builder.
func (pu *PostUpdate) Mutation() *PostMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PostUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PostUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PostUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PostUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PostUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(post.Table, post.Columns, sqlgraph.NewFieldSpec(post.FieldID, field.TypeUint))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if pu.mutation.CreatedAtCleared() {
		_spec.ClearField(post.FieldCreatedAt, field.TypeTime)
	}
	if pu.mutation.UpdatedAtCleared() {
		_spec.ClearField(post.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := pu.mutation.UserID(); ok {
		_spec.SetField(post.FieldUserID, field.TypeUint, value)
	}
	if value, ok := pu.mutation.AddedUserID(); ok {
		_spec.AddField(post.FieldUserID, field.TypeUint, value)
	}
	if value, ok := pu.mutation.Site(); ok {
		_spec.SetField(post.FieldSite, field.TypeString, value)
	}
	if value, ok := pu.mutation.Path(); ok {
		_spec.SetField(post.FieldPath, field.TypeString, value)
	}
	if pu.mutation.PathCleared() {
		_spec.ClearField(post.FieldPath, field.TypeString)
	}
	if value, ok := pu.mutation.Pid(); ok {
		_spec.SetField(post.FieldPid, field.TypeString, value)
	}
	if value, ok := pu.mutation.ReadLastReplyID(); ok {
		_spec.SetField(post.FieldReadLastReplyID, field.TypeString, value)
	}
	if pu.mutation.ReadLastReplyIDCleared() {
		_spec.ClearField(post.FieldReadLastReplyID, field.TypeString)
	}
	if value, ok := pu.mutation.ReadLastReplyIndex(); ok {
		_spec.SetField(post.FieldReadLastReplyIndex, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedReadLastReplyIndex(); ok {
		_spec.AddField(post.FieldReadLastReplyIndex, field.TypeInt, value)
	}
	if pu.mutation.ReadLastReplyIndexCleared() {
		_spec.ClearField(post.FieldReadLastReplyIndex, field.TypeInt)
	}
	if value, ok := pu.mutation.ReadLastReplyTime(); ok {
		_spec.SetField(post.FieldReadLastReplyTime, field.TypeTime, value)
	}
	if pu.mutation.ReadLastReplyTimeCleared() {
		_spec.ClearField(post.FieldReadLastReplyTime, field.TypeTime)
	}
	if value, ok := pu.mutation.MarkBanned(); ok {
		_spec.SetField(post.FieldMarkBanned, field.TypeBool, value)
	}
	if pu.mutation.MarkBannedCleared() {
		_spec.ClearField(post.FieldMarkBanned, field.TypeBool)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{post.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PostUpdateOne is the builder for updating a single Post entity.
type PostUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PostMutation
}

// SetUserID sets the "user_id" field.
func (puo *PostUpdateOne) SetUserID(u uint) *PostUpdateOne {
	puo.mutation.ResetUserID()
	puo.mutation.SetUserID(u)
	return puo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableUserID(u *uint) *PostUpdateOne {
	if u != nil {
		puo.SetUserID(*u)
	}
	return puo
}

// AddUserID adds u to the "user_id" field.
func (puo *PostUpdateOne) AddUserID(u int) *PostUpdateOne {
	puo.mutation.AddUserID(u)
	return puo
}

// SetSite sets the "site" field.
func (puo *PostUpdateOne) SetSite(s string) *PostUpdateOne {
	puo.mutation.SetSite(s)
	return puo
}

// SetNillableSite sets the "site" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableSite(s *string) *PostUpdateOne {
	if s != nil {
		puo.SetSite(*s)
	}
	return puo
}

// SetPath sets the "path" field.
func (puo *PostUpdateOne) SetPath(s string) *PostUpdateOne {
	puo.mutation.SetPath(s)
	return puo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillablePath(s *string) *PostUpdateOne {
	if s != nil {
		puo.SetPath(*s)
	}
	return puo
}

// ClearPath clears the value of the "path" field.
func (puo *PostUpdateOne) ClearPath() *PostUpdateOne {
	puo.mutation.ClearPath()
	return puo
}

// SetPid sets the "pid" field.
func (puo *PostUpdateOne) SetPid(s string) *PostUpdateOne {
	puo.mutation.SetPid(s)
	return puo
}

// SetNillablePid sets the "pid" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillablePid(s *string) *PostUpdateOne {
	if s != nil {
		puo.SetPid(*s)
	}
	return puo
}

// SetReadLastReplyID sets the "read_last_reply_id" field.
func (puo *PostUpdateOne) SetReadLastReplyID(s string) *PostUpdateOne {
	puo.mutation.SetReadLastReplyID(s)
	return puo
}

// SetNillableReadLastReplyID sets the "read_last_reply_id" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableReadLastReplyID(s *string) *PostUpdateOne {
	if s != nil {
		puo.SetReadLastReplyID(*s)
	}
	return puo
}

// ClearReadLastReplyID clears the value of the "read_last_reply_id" field.
func (puo *PostUpdateOne) ClearReadLastReplyID() *PostUpdateOne {
	puo.mutation.ClearReadLastReplyID()
	return puo
}

// SetReadLastReplyIndex sets the "read_last_reply_index" field.
func (puo *PostUpdateOne) SetReadLastReplyIndex(i int) *PostUpdateOne {
	puo.mutation.ResetReadLastReplyIndex()
	puo.mutation.SetReadLastReplyIndex(i)
	return puo
}

// SetNillableReadLastReplyIndex sets the "read_last_reply_index" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableReadLastReplyIndex(i *int) *PostUpdateOne {
	if i != nil {
		puo.SetReadLastReplyIndex(*i)
	}
	return puo
}

// AddReadLastReplyIndex adds i to the "read_last_reply_index" field.
func (puo *PostUpdateOne) AddReadLastReplyIndex(i int) *PostUpdateOne {
	puo.mutation.AddReadLastReplyIndex(i)
	return puo
}

// ClearReadLastReplyIndex clears the value of the "read_last_reply_index" field.
func (puo *PostUpdateOne) ClearReadLastReplyIndex() *PostUpdateOne {
	puo.mutation.ClearReadLastReplyIndex()
	return puo
}

// SetReadLastReplyTime sets the "read_last_reply_time" field.
func (puo *PostUpdateOne) SetReadLastReplyTime(t time.Time) *PostUpdateOne {
	puo.mutation.SetReadLastReplyTime(t)
	return puo
}

// SetNillableReadLastReplyTime sets the "read_last_reply_time" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableReadLastReplyTime(t *time.Time) *PostUpdateOne {
	if t != nil {
		puo.SetReadLastReplyTime(*t)
	}
	return puo
}

// ClearReadLastReplyTime clears the value of the "read_last_reply_time" field.
func (puo *PostUpdateOne) ClearReadLastReplyTime() *PostUpdateOne {
	puo.mutation.ClearReadLastReplyTime()
	return puo
}

// SetMarkBanned sets the "mark_banned" field.
func (puo *PostUpdateOne) SetMarkBanned(b bool) *PostUpdateOne {
	puo.mutation.SetMarkBanned(b)
	return puo
}

// SetNillableMarkBanned sets the "mark_banned" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableMarkBanned(b *bool) *PostUpdateOne {
	if b != nil {
		puo.SetMarkBanned(*b)
	}
	return puo
}

// ClearMarkBanned clears the value of the "mark_banned" field.
func (puo *PostUpdateOne) ClearMarkBanned() *PostUpdateOne {
	puo.mutation.ClearMarkBanned()
	return puo
}

// Mutation returns the PostMutation object of the builder.
func (puo *PostUpdateOne) Mutation() *PostMutation {
	return puo.mutation
}

// Where appends a list predicates to the PostUpdate builder.
func (puo *PostUpdateOne) Where(ps ...predicate.Post) *PostUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PostUpdateOne) Select(field string, fields ...string) *PostUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Post entity.
func (puo *PostUpdateOne) Save(ctx context.Context) (*Post, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PostUpdateOne) SaveX(ctx context.Context) *Post {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PostUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PostUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PostUpdateOne) sqlSave(ctx context.Context) (_node *Post, err error) {
	_spec := sqlgraph.NewUpdateSpec(post.Table, post.Columns, sqlgraph.NewFieldSpec(post.FieldID, field.TypeUint))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Post.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, post.FieldID)
		for _, f := range fields {
			if !post.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != post.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if puo.mutation.CreatedAtCleared() {
		_spec.ClearField(post.FieldCreatedAt, field.TypeTime)
	}
	if puo.mutation.UpdatedAtCleared() {
		_spec.ClearField(post.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := puo.mutation.UserID(); ok {
		_spec.SetField(post.FieldUserID, field.TypeUint, value)
	}
	if value, ok := puo.mutation.AddedUserID(); ok {
		_spec.AddField(post.FieldUserID, field.TypeUint, value)
	}
	if value, ok := puo.mutation.Site(); ok {
		_spec.SetField(post.FieldSite, field.TypeString, value)
	}
	if value, ok := puo.mutation.Path(); ok {
		_spec.SetField(post.FieldPath, field.TypeString, value)
	}
	if puo.mutation.PathCleared() {
		_spec.ClearField(post.FieldPath, field.TypeString)
	}
	if value, ok := puo.mutation.Pid(); ok {
		_spec.SetField(post.FieldPid, field.TypeString, value)
	}
	if value, ok := puo.mutation.ReadLastReplyID(); ok {
		_spec.SetField(post.FieldReadLastReplyID, field.TypeString, value)
	}
	if puo.mutation.ReadLastReplyIDCleared() {
		_spec.ClearField(post.FieldReadLastReplyID, field.TypeString)
	}
	if value, ok := puo.mutation.ReadLastReplyIndex(); ok {
		_spec.SetField(post.FieldReadLastReplyIndex, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedReadLastReplyIndex(); ok {
		_spec.AddField(post.FieldReadLastReplyIndex, field.TypeInt, value)
	}
	if puo.mutation.ReadLastReplyIndexCleared() {
		_spec.ClearField(post.FieldReadLastReplyIndex, field.TypeInt)
	}
	if value, ok := puo.mutation.ReadLastReplyTime(); ok {
		_spec.SetField(post.FieldReadLastReplyTime, field.TypeTime, value)
	}
	if puo.mutation.ReadLastReplyTimeCleared() {
		_spec.ClearField(post.FieldReadLastReplyTime, field.TypeTime)
	}
	if value, ok := puo.mutation.MarkBanned(); ok {
		_spec.SetField(post.FieldMarkBanned, field.TypeBool, value)
	}
	if puo.mutation.MarkBannedCleared() {
		_spec.ClearField(post.FieldMarkBanned, field.TypeBool)
	}
	_node = &Post{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{post.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}

func (puo *PostUpdateOne) SetFromOpt(opt *PostOpt) *PostUpdateOne {
	if opt.ID != nil && *opt.ID > 0 {
		puo.mutation.SetID(*opt.ID)
	}
	puo.SetNillableUserID(opt.UserID)
	puo.SetNillableSite(opt.Site)
	puo.SetNillablePath(opt.Path)
	puo.SetNillablePid(opt.Pid)
	puo.SetNillableReadLastReplyID(opt.ReadLastReplyID)
	puo.SetNillableReadLastReplyIndex(opt.ReadLastReplyIndex)
	puo.SetNillableReadLastReplyTime(opt.ReadLastReplyTime)
	puo.SetNillableMarkBanned(opt.MarkBanned)
	return puo
}
