// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"readmark/ent/post"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Post is the model entity for the Post schema.
type Post struct {
	config `json:"-"`
	// ID of the ent.
	ID uint `json:"ID,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"CreatedAt,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"UpdatedAt,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uint `json:"UserID,omitempty"`
	// Site holds the value of the "site" field.
	Site string `json:"Site,omitempty"`
	// Path holds the value of the "path" field.
	Path *string `json:"Path,omitempty"`
	// 站内ID
	Pid string `json:"Pid,omitempty"`
	// ReadLastReplyID holds the value of the "read_last_reply_id" field.
	ReadLastReplyID *string `json:"ReadLastReplyID,omitempty"`
	// 帖子内楼层
	ReadLastReplyIndex *int `json:"ReadLastReplyIndex,omitempty"`
	// ReadLastReplyTime holds the value of the "read_last_reply_time" field.
	ReadLastReplyTime *time.Time `json:"ReadLastReplyTime,omitempty"`
	// MarkBanned holds the value of the "mark_banned" field.
	MarkBanned   *bool `json:"MarkBanned,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Post) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case post.FieldMarkBanned:
			values[i] = new(sql.NullBool)
		case post.FieldID, post.FieldUserID, post.FieldReadLastReplyIndex:
			values[i] = new(sql.NullInt64)
		case post.FieldSite, post.FieldPath, post.FieldPid, post.FieldReadLastReplyID:
			values[i] = new(sql.NullString)
		case post.FieldCreatedAt, post.FieldUpdatedAt, post.FieldReadLastReplyTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Post fields.
func (po *Post) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case post.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			po.ID = uint(value.Int64)
		case post.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				po.CreatedAt = value.Time
			}
		case post.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				po.UpdatedAt = value.Time
			}
		case post.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				po.UserID = uint(value.Int64)
			}
		case post.FieldSite:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field site", values[i])
			} else if value.Valid {
				po.Site = value.String
			}
		case post.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				po.Path = new(string)
				*po.Path = value.String
			}
		case post.FieldPid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pid", values[i])
			} else if value.Valid {
				po.Pid = value.String
			}
		case post.FieldReadLastReplyID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field read_last_reply_id", values[i])
			} else if value.Valid {
				po.ReadLastReplyID = new(string)
				*po.ReadLastReplyID = value.String
			}
		case post.FieldReadLastReplyIndex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field read_last_reply_index", values[i])
			} else if value.Valid {
				po.ReadLastReplyIndex = new(int)
				*po.ReadLastReplyIndex = int(value.Int64)
			}
		case post.FieldReadLastReplyTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field read_last_reply_time", values[i])
			} else if value.Valid {
				po.ReadLastReplyTime = new(time.Time)
				*po.ReadLastReplyTime = value.Time
			}
		case post.FieldMarkBanned:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field mark_banned", values[i])
			} else if value.Valid {
				po.MarkBanned = new(bool)
				*po.MarkBanned = value.Bool
			}
		default:
			po.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Post.
// This includes values selected through modifiers, order, etc.
func (po *Post) Value(name string) (ent.Value, error) {
	return po.selectValues.Get(name)
}

// Update returns a builder for updating this Post.
// Note that you need to call Post.Unwrap() before calling this method if this Post
// was returned from a transaction, and the transaction was committed or rolled back.
func (po *Post) Update() *PostUpdateOne {
	return NewPostClient(po.config).UpdateOne(po)
}

// Unwrap unwraps the Post entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (po *Post) Unwrap() *Post {
	_tx, ok := po.config.driver.(*txDriver)
	if !ok {
		panic("ent: Post is not a transactional entity")
	}
	po.config.driver = _tx.drv
	return po
}

// String implements the fmt.Stringer.
func (po *Post) String() string {
	var builder strings.Builder
	builder.WriteString("Post(")
	builder.WriteString(fmt.Sprintf("id=%v, ", po.ID))
	builder.WriteString("created_at=")
	builder.WriteString(po.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(po.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", po.UserID))
	builder.WriteString(", ")
	builder.WriteString("site=")
	builder.WriteString(po.Site)
	builder.WriteString(", ")
	if v := po.Path; v != nil {
		builder.WriteString("path=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("pid=")
	builder.WriteString(po.Pid)
	builder.WriteString(", ")
	if v := po.ReadLastReplyID; v != nil {
		builder.WriteString("read_last_reply_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := po.ReadLastReplyIndex; v != nil {
		builder.WriteString("read_last_reply_index=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := po.ReadLastReplyTime; v != nil {
		builder.WriteString("read_last_reply_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := po.MarkBanned; v != nil {
		builder.WriteString("mark_banned=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

type PostOpt struct {
	ID *uint `json:"ID,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"CreatedAt,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"UpdatedAt,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID *uint `json:"UserID,omitempty"`
	// Site holds the value of the "site" field.
	Site *string `json:"Site,omitempty"`
	// Path holds the value of the "path" field.
	Path *string `json:"Path,omitempty"`
	// 站内ID
	Pid *string `json:"Pid,omitempty"`
	// ReadLastReplyID holds the value of the "read_last_reply_id" field.
	ReadLastReplyID *string `json:"ReadLastReplyID,omitempty"`
	// 帖子内楼层
	ReadLastReplyIndex *int `json:"ReadLastReplyIndex,omitempty"`
	// ReadLastReplyTime holds the value of the "read_last_reply_time" field.
	ReadLastReplyTime *time.Time `json:"ReadLastReplyTime,omitempty"`
	// MarkBanned holds the value of the "mark_banned" field.
	MarkBanned *bool `json:"MarkBanned,omitempty"`
}

// Posts is a parsable slice of Post.
type Posts []*Post
